{"version":3,"file":"saveManager-BcucB9PP.js","sources":["../../../../node_modules/.pnpm/idb@8.0.3/node_modules/idb/build/index.js","../../src/persistence/saveManager.ts"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { openDB, DBSchema, IDBPDatabase } from 'idb';\nimport { GameStateSchema, type GameState, SAVE_VERSION } from '@dragon-isle/shared';\n\ninterface DragonIsleDB extends DBSchema {\n  saves: {\n    key: number;\n    value: GameState;\n    indexes: { 'by-updated': string };\n  };\n  settings: {\n    key: string;\n    value: any;\n  };\n}\n\nconst DB_NAME = 'dragon-isle-db';\nconst DB_VERSION = 1;\n\nlet db: IDBPDatabase<DragonIsleDB> | null = null;\n\nasync function getDB(): Promise<IDBPDatabase<DragonIsleDB>> {\n  if (!db) {\n    db = await openDB<DragonIsleDB>(DB_NAME, DB_VERSION, {\n      upgrade(db) {\n        if (!db.objectStoreNames.contains('saves')) {\n          const saveStore = db.createObjectStore('saves', { keyPath: 'saveHeader.slotId' });\n          saveStore.createIndex('by-updated', 'saveHeader.updatedAt');\n        }\n\n        if (!db.objectStoreNames.contains('settings')) {\n          db.createObjectStore('settings');\n        }\n      },\n    });\n  }\n  return db;\n}\n\nexport async function saveGameToSlot(gameState: GameState): Promise<void> {\n  try {\n    const db = await getDB();\n    \n    gameState.saveHeader.updatedAt = new Date().toISOString();\n    gameState.saveHeader.version = SAVE_VERSION;\n    \n    const validatedState = GameStateSchema.parse(gameState);\n    \n    await db.put('saves', validatedState);\n    \n    console.log(`Game saved to slot ${gameState.saveHeader.slotId}`);\n  } catch (error) {\n    console.error('Failed to save game:', error);\n    throw new Error('Failed to save game');\n  }\n}\n\nexport async function loadGameFromSlot(slotId: number): Promise<GameState | null> {\n  try {\n    const db = await getDB();\n    const save = await db.get('saves', slotId);\n    \n    if (!save) {\n      return null;\n    }\n    \n    const validatedState = GameStateSchema.parse(save);\n    \n    if (validatedState.saveHeader.version !== SAVE_VERSION) {\n      const migratedState = await migrateGameState(validatedState);\n      return migratedState;\n    }\n    \n    return validatedState;\n  } catch (error) {\n    console.error('Failed to load game:', error);\n    throw new Error('Failed to load game');\n  }\n}\n\nexport async function deleteGameFromSlot(slotId: number): Promise<void> {\n  try {\n    const db = await getDB();\n    await db.delete('saves', slotId);\n    console.log(`Game deleted from slot ${slotId}`);\n  } catch (error) {\n    console.error('Failed to delete game:', error);\n    throw new Error('Failed to delete game');\n  }\n}\n\nexport async function getAllSaves(): Promise<GameState[]> {\n  try {\n    const db = await getDB();\n    const saves = await db.getAllFromIndex('saves', 'by-updated');\n    return saves.map(save => GameStateSchema.parse(save));\n  } catch (error) {\n    console.error('Failed to get all saves:', error);\n    return [];\n  }\n}\n\nexport async function getSaveInfo(slotId: number): Promise<{ exists: boolean; header?: GameState['saveHeader'] }> {\n  try {\n    const db = await getDB();\n    const save = await db.get('saves', slotId);\n    \n    if (!save) {\n      return { exists: false };\n    }\n    \n    return {\n      exists: true,\n      header: save.saveHeader\n    };\n  } catch (error) {\n    console.error('Failed to get save info:', error);\n    return { exists: false };\n  }\n}\n\nasync function migrateGameState(gameState: GameState): Promise<GameState> {\n  console.log(`Migrating save from version ${gameState.saveHeader.version} to ${SAVE_VERSION}`);\n  let migrated = { ...gameState } as GameState as any;\n  // v1 -> v2: add historyIndex defaults if missing and bump version\n  if (!('historyIndex' in migrated.worldSnapshot)) {\n    migrated = {\n      ...migrated,\n      worldSnapshot: {\n        ...migrated.worldSnapshot,\n        historyIndex: {\n          poiState: [],\n          factionBaseline: { relations: {}, notes: [] },\n          mapMarkers: [],\n          questHooks: []\n        }\n      }\n    };\n  }\n  migrated.saveHeader = { ...migrated.saveHeader, version: SAVE_VERSION };\n  return migrated as GameState;\n}\n\nexport async function exportSave(slotId: number): Promise<string> {\n  const save = await loadGameFromSlot(slotId);\n  if (!save) {\n    throw new Error('Save not found');\n  }\n  \n  return btoa(JSON.stringify(save));\n}\n\nexport async function importSave(data: string, slotId?: number): Promise<void> {\n  try {\n    const save = JSON.parse(atob(data)) as GameState;\n    const validatedSave = GameStateSchema.parse(save);\n    \n    if (slotId !== undefined) {\n      validatedSave.saveHeader.slotId = slotId;\n    }\n    \n    await saveGameToSlot(validatedSave);\n  } catch (error) {\n    console.error('Failed to import save:', error);\n    throw new Error('Invalid save data');\n  }\n}\n\nexport async function getStorageUsage(): Promise<{ used: number; quota: number }> {\n  if ('storage' in navigator && 'estimate' in navigator.storage) {\n    const estimate = await navigator.storage.estimate();\n    return {\n      used: estimate.usage || 0,\n      quota: estimate.quota || 0\n    };\n  }\n  \n  return { used: 0, quota: 0 };\n}\n\nexport async function clearAllData(): Promise<void> {\n  try {\n    const db = await getDB();\n    const tx = db.transaction(['saves', 'settings'], 'readwrite');\n    \n    await Promise.all([\n      tx.objectStore('saves').clear(),\n      tx.objectStore('settings').clear()\n    ]);\n    \n    await tx.done;\n    console.log('All data cleared');\n  } catch (error) {\n    console.error('Failed to clear data:', error);\n    throw new Error('Failed to clear data');\n  }\n}\n"],"names":["instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","transactionDoneMap","WeakMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","set","value","has","replaceTraps","callback","wrapFunction","func","IDBCursor","prototype","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","request","transformCachableValue","tx","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBDatabase","IDBObjectStore","IDBIndex","Proxy","IDBRequest","promise","success","result","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","storeName","__async","transaction","store","index","shift","all","oldTraps","__spreadProps","__spreadValues","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","__asyncGenerator","cursor","__await","openCursor","proxiedCursor","delete","isIteratorProp","Symbol","asyncIterator","DB_NAME","DB_VERSION","db","getDB","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","then","catch","openDB","contains","createObjectStore","keyPath","createIndex","saveGameToSlot","gameState","saveHeader","updatedAt","Date","toISOString","SAVE_VERSION","validatedState","GameStateSchema","parse","put","Error","loadGameFromSlot","slotId","save","migrated","worldSnapshot","historyIndex","poiState","factionBaseline","relations","notes","mapMarkers","questHooks","migrateGameState","getSaveInfo","exists","header"],"mappings":"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","x_google_ignoreList":[0]}